#!/usr/bin/env node

const BASE_URL = process.env.TEST_URL || 'http://localhost:3000'

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_USER = {
  email: 'test@podcasttracker.com',
  password: 'testpassword123'
}

const TEST_PODCAST = {
  source: 'spotify',
  source_id: '4rOoJ6Egrf8K2IrywzwOMk', // Joe Rogan Experience
  title: 'The Joe Rogan Experience',
  author: 'Joe Rogan',
  description: 'The Joe Rogan Experience podcast is a long form conversation hosted by comedian Joe Rogan with friends and guests that have included comedians, actors, musicians, MMA fighters, authors, artists, and beyond.',
  image_url: 'https://i.scdn.co/image/ab6765630000ba8a81f07e1ead0317ee3c285bfa',
  category: 'Comedy',
  rss_url: 'https://feeds.megaphone.fm/PPY8437510291'
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function makeRequest(endpoint, options = {}) {
  const url = `${BASE_URL}${endpoint}`
  const response = await fetch(url, {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    },
    ...options
  })
  
  const data = await response.json()
  return { response, data }
}

async function testAuth() {
  console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
  
  try {
    // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('  - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
    const { response: signupResponse, data: signupData } = await makeRequest('/api/auth/signup', {
      method: 'POST',
      body: JSON.stringify(TEST_USER)
    })
    
    if (signupResponse.ok) {
      console.log('  ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
    } else {
      console.log('  ‚ö†Ô∏è  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', signupData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
    
    // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
    console.log('  - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...')
    const { response: signinResponse, data: signinData } = await makeRequest('/api/auth/signin', {
      method: 'POST',
      body: JSON.stringify(TEST_USER)
    })
    
    if (signinResponse.ok) {
      console.log('  ‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω')
      return signinData.session?.access_token
    } else {
      console.log('  ‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è:', signinData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      return null
    }
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message)
    return null
  }
}

async function testSearch(token) {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Å—Ç–æ–≤...')
  
  try {
    const { response, data } = await makeRequest('/api/podcasts/search?q=joe rogan&platform=spotify&limit=5', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    
    if (response.ok && data.results && data.results.length > 0) {
      console.log('  ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–∞—Å—Ç–æ–≤:', data.results.length)
      return data.results[0]
    } else {
      console.log('  ‚ùå –ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      return null
    }
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message)
    return null
  }
}

async function testPodcastTracking(token, podcast) {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–∞—Å—Ç–æ–≤...')
  
  try {
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞
    console.log('  - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...')
    const { response: addResponse, data: addData } = await makeRequest('/api/user/podcasts', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ podcastId: podcast.id })
    })
    
    if (addResponse.ok) {
      console.log('  ‚úÖ –ü–æ–¥–∫–∞—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ')
    } else {
      console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç:', addData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–¥–∫–∞—Å—Ç–æ–≤
    console.log('  - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–¥–∫–∞—Å—Ç–æ–≤...')
    const { response: getResponse, data: getData } = await makeRequest('/api/user/podcasts', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    
    if (getResponse.ok && getData.podcasts) {
      console.log('  ‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Å—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', getData.podcasts.length)
    } else {
      console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Å—Ç–æ–≤:', getData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
    
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', error.message)
  }
}

async function testCharts(token) {
  console.log('\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ä—Ç–æ–≤...')
  
  try {
    const { response, data } = await makeRequest('/api/charts?platform=spotify&category=1310&limit=10&country=US', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    
    if (response.ok && data.charts && data.charts.length > 0) {
      console.log('  ‚úÖ –ß–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', data.charts.length)
    } else {
      console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ä—Ç—ã:', data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ä—Ç–æ–≤:', error.message)
  }
}

async function testAIAnalysis(token, podcast) {
  console.log('\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞...')
  
  try {
    // –ê–Ω–∞–ª–∏–∑ –æ–±–ª–æ–∂–∫–∏
    console.log('  - –ê–Ω–∞–ª–∏–∑ –æ–±–ª–æ–∂–∫–∏ –ø–æ–¥–∫–∞—Å—Ç–∞...')
    const { response: coverResponse, data: coverData } = await makeRequest('/api/ai/analyze-cover', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        imageUrl: podcast.image_url,
        podcastTitle: podcast.title
      })
    })
    
    if (coverResponse.ok && coverData.analysis) {
      console.log('  ‚úÖ –ê–Ω–∞–ª–∏–∑ –æ–±–ª–æ–∂–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω')
    } else {
      console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–æ–∂–∫—É:', coverData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π
    console.log('  - –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π...')
    const { response: analysisResponse, data: analysisData } = await makeRequest('/api/ai/analyze-position-changes', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ podcastId: podcast.id })
    })
    
    if (analysisResponse.ok && analysisData.analysis) {
      console.log('  ‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω')
    } else {
      console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π:', analysisData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
    
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error.message)
  }
}

async function testUserLimits(token) {
  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
  
  try {
    const { response, data } = await makeRequest('/api/user/limits', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    
    if (response.ok && data.limits) {
      console.log('  ‚úÖ –õ–∏–º–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:')
      console.log(`    - –ü–ª–∞–Ω: ${data.limits.plan}`)
      console.log(`    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–¥–∫–∞—Å—Ç–æ–≤: ${data.limits.podcasts_tracked}/${data.limits.max_podcasts}`)
      console.log(`    - AI –∞–Ω–∞–ª–∏–∑–æ–≤: ${data.limits.ai_analyses_used}/${data.limits.max_ai_analyses}`)
    } else {
      console.log('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã:', data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    }
  } catch (error) {
    console.log('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤:', error.message)
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Podcast Tracker API...')
  console.log(`üìç –ë–∞–∑–æ–≤—ã–π URL: ${BASE_URL}`)
  
  // –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const token = await testAuth()
  if (!token) {
    console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    return
  }
  
  // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
  const podcast = await testSearch(token)
  if (!podcast) {
    console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥–∫–∞—Å—Ç')
    return
  }
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
  await testPodcastTracking(token, podcast)
  await testCharts(token)
  await testAIAnalysis(token, podcast)
  await testUserLimits(token)
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error)
